{"version":3,"sources":["firebase.js","Timeline.js","UserProfile.js","SignIn.js","PostPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Post","props","post","timestamp","postedAt","tz","format","id","className","to","author","name","content","cachedUsers","Map","Timeline","state","error","isLoaded","posts","currentComponent","this","firestore","collection","where","moment","subtract","toDate","orderBy","limit","get","then","querySnapshot","Promise","all","docs","map","doc","a","async","authorID","data","undefined","cachedUserName","authorInRepository","set","body","unix","seconds","setState","catch","console","log","message","list","push","key","length","React","Component","UserProfile","user","match","params","fetch","res","json","result","SignIn","provider","auth","TwitterAuthProvider","signInWithRedirect","onClick","signIn","PostPage","postButtonDisabled","textareaDisabled","handleChange","bind","postMessage","event","target","value","db","add","FieldValue","serverTimestamp","currentUser","uid","docRef","alert","window","history","back","rows","cols","autoFocus","minLength","maxLength","placeholder","required","onChange","disabled","App","checked_signin","onAuthStateChanged","signOut","signInPage","timeLinePage","href","src","photoURL","alt","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b89fe03.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/analytics'\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCHftesHfgg_vO29DkbpUbLOZYn4q9JpKM\",\n  authDomain: \"mayfly-86915.firebaseapp.com\",\n  databaseURL: \"https://mayfly-86915.firebaseio.com\",\n  projectId: \"mayfly-86915\",\n  storageBucket: \"mayfly-86915.appspot.com\",\n  messagingSenderId: \"490409158667\",\n  appId: \"1:490409158667:web:bf0ec8a4625217dc61ff0e\",\n  measurementId: \"G-G211MXL861\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase\n","import React from 'react';\nimport './Timeline.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from \"react-router-dom\";\nimport firebase from \"./firebase\";\n\nfunction Post(props) {\n  let post = props.post;\n  let timestamp = post.postedAt.tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n\n  return (\n    <article id={post.id} className=\"Post\">\n      <div className=\"Post-username-timestamp\">\n        <div>\n          <NavLink className=\"Post-username\"\n            to={'/time-limited-sns/users/' + post.author.id}>\n            {post.author.name}\n          </NavLink>\n        </div>\n        <div className=\"Post-timestamp\">　·　</div>\n        <div className=\"Post-timestamp\">{timestamp}</div>\n      </div>\n      <div>{post.content}</div>\n    </article>\n  );\n}\n\nconst cachedUsers = new Map();\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    let currentComponent = this;\n    const db = firebase.firestore();\n    db.collection(\"posted-contents\")\n      .where('postedAt', '>=', moment().subtract(1, 'hours').toDate())\n      .orderBy(\"postedAt\", \"desc\")\n      // TODO Get old posted contents after scrolling down to the most bottom\n      .limit(20)\n      .get()\n      .then(function (querySnapshot) {\n\n        Promise.all(querySnapshot.docs.map(async (doc) => {\n          const authorID = doc.data().author.id;\n          const cachedUserName = cachedUsers.get(authorID);\n          let author;\n          if (cachedUserName !== undefined) {\n            author = {\n              id: authorID,\n              name: cachedUserName\n            };\n          } else {\n            const authorInRepository = await doc.data().author.get();\n            author = {\n              id: authorInRepository.id,\n              name: authorInRepository.data().name\n            };\n          }\n\n          cachedUsers.set(author.id, author.name);\n\n          return {\n            id: doc.id,\n            content: doc.data().body,\n            postedAt: moment.unix(doc.data().postedAt.seconds),\n            author: {\n              id: author.id,\n              name: author.name\n            },\n          };\n        }))\n          .then(function (posts) {\n            currentComponent.setState({\n              isLoaded: true,\n              posts\n            });\n          });\n      })\n      .catch(function (error) {\n        console.log(\"Error getting documents: \", error);\n        currentComponent.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  }\n\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching...</div>\n    } else {\n\n      let list = [];\n      for (const post of posts) {\n        list.push(<Post key={post.id} post={post} />);\n      }\n\n      return (\n        <div>\n          <div className='Timeline-post-button'>\n            <NavLink className=\"Timeline-post-button\" to='/time-limited-sns/compose/post/'>\n              <button>投稿</button>\n            </NavLink>\n          </div>\n          {list.length <= 0 ? <div>まだ投稿がありません。</div> : list}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      user: {\n        id: props.match.params.id\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\" + this.state.user.id)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            user: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, user } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching user...</div>\n    } else {\n      return (\n        <div>\n          <div>ID: {user.id}</div>\n          <div>Username: {user.name}</div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default UserProfile;\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './SignIn.css';\n\nclass SignIn extends React.Component {\n  signIn() {\n    const provider = new firebase.auth.TwitterAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }\n\n  render() {\n    return (\n      <div className='SignIn'>\n        <div className='SignIn-top-message'>\n          <span>SNSのメッセージを</span><span>あとから消すのに</span><span>疲れたあなたへ</span>\n        </div>\n        <div className='SignIn-description'>\n          <span>カゲロウは、投稿したメッセージが</span><span>1時間で消えるSNSです。</span><br />\n          <span>さあ、カゲロウを使って、あとで消す手間から</span><span>解放されましょう！</span>\n        </div>\n        <div className='SignIn-button'>\n          <button onClick={this.signIn}><span>Twitterアカウントで</span><span>新規登録／ログイン</span></button>\n        </div>\n        <div className='SignIn-description'>\n          ちなみに、カゲロウという名前は昆虫のカゲロウ（蜉蝣）から来ています。\n          昆虫のカゲロウの成虫は寿命が1日と短命なため、\n          「メッセージが1時間で消える」というこのSNSの特徴と近いものを感じ、この名前にしました。\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport './PostPage.css';\nimport firebase from \"./firebase\";\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: '',\n      postButtonDisabled: true,\n      textareaDisabled: false,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.postMessage = this.postMessage.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      body: event.target.value,\n      postButtonDisabled: event.target.value ? false : true\n    });\n  }\n\n  postMessage(event) {\n    this.setState({\n      postButtonDisabled: true,\n      textareaDisabled: true,\n    });\n\n    const db = firebase.firestore();\n    db.collection(\"posted-contents\").add({\n      body: this.state.body,\n      postedAt: firebase.firestore.FieldValue.serverTimestamp(),\n      author: db.collection(\"users\").doc(firebase.auth().currentUser.uid),\n    })\n      .then(function (docRef) {\n        console.log(\"Document written with ID: \", docRef.id);\n        alert(\"投稿してくれてありがとうございます！\");\n        window.history.back();\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n        alert(\"投稿時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  render() {\n    return (\n      <div className='PostPage'>\n        <div>\n          <textarea rows=\"10\" cols=\"50\" autoFocus minLength='1' maxLength='200'\n            placeholder='いま何してる？' required onChange={this.handleChange}\n            disabled={this.state.textareaDisabled}>\n          </textarea>\n        </div>\n        <div className='PostPage-post-button'>\n          <button onClick={this.postMessage}\n            disabled={this.state.postButtonDisabled}>投稿する</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","import React from 'react';\nimport './App.css';\nimport Timeline from \"./Timeline\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport UserProfile from './UserProfile';\nimport firebase from \"./firebase\";\nimport SignIn from './SignIn';\nimport PostPage from './PostPage';\n\nclass App extends React.Component {\n  state = {\n    user: null,\n    checked_signin: false\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        user: user,\n        checked_signin: true\n      })\n    })\n  }\n\n  signOut() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const signInPage = (\n      <SignIn />\n    );\n\n    const timeLinePage = (\n      <div>\n        <header className=\"App-header\">\n          <div>\n            <a className=\"App-link\" href=\"/time-limited-sns/\">\n              カゲロウ（開発中）\n            </a>\n          </div>\n          <div>\n            <img src={this.state.user && this.state.user.photoURL} alt='profile'></img>\n          </div>\n          <div className=\"App-header-signout-button\">\n            <button onClick={this.signOut}>ログアウト</button>\n          </div>\n        </header>\n        <BrowserRouter>\n          <main className=\"App-main\">\n            <Route exact path='/time-limited-sns/' component={Timeline} />\n            <Route exact path='/time-limited-sns/users/:id' component={UserProfile} />\n            <Route exact path='/time-limited-sns/compose/post/' component={PostPage} />\n          </main>\n        </BrowserRouter>\n      </div>\n    );\n\n    const getPageContent = () => {\n      if (!this.state.checked_signin) {\n        return (\n          <div>\n            ログイン状態を確認中です。<br />\n            少々お待ち下さい。（数秒かかることがあります）\n          </div>\n        )\n      }\n\n      return this.state.user ? timeLinePage : signInPage\n    }\n\n    return (\n      <div className=\"App\">\n        {getPageContent()}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}