{"version":3,"sources":["Timeline.js","UserProfile.js","firebase.js","SignIn.js","PostPage.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","post","timestamp","moment","subtract","id","tz","format","className","to","userId","body","Timeline","state","error","isLoaded","posts","fetch","then","res","json","result","setState","this","message","list","push","key","React","Component","UserProfile","user","match","params","name","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SignIn","provider","auth","TwitterAuthProvider","signInWithRedirect","onClick","signIn","PostPage","postButtonDisabled","textareaDisabled","handleChange","bind","postMessage","event","target","value","firestore","collection","add","postedAt","FieldValue","serverTimestamp","authorID","currentUser","uid","docRef","console","log","alert","window","history","back","catch","rows","cols","autoFocus","minLength","maxLength","placeholder","required","onChange","disabled","App","checked_signin","onAuthStateChanged","signOut","signInPage","timeLinePage","href","src","photoURL","alt","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dde699a9.chunk.js","sourcesContent":["import React from 'react';\nimport './Timeline.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from \"react-router-dom\";\n\nfunction Post(props) {\n  let post = props.post;\n  let timestamp = moment().subtract(post.id, 'seconds')\n    .tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n  return (\n    <article id={post.id} className=\"Post\">\n      <div className=\"Post-username-timestamp\">\n        <div>\n          <NavLink className=\"Post-username\" to={'/time-limited-sns/users/' + post.userId}>\n            User: {\"user\" + post.userId}\n          </NavLink>\n        </div>\n        <div className=\"Post-timestamp\">　·　</div>\n        <div className=\"Post-timestamp\">{timestamp}</div>\n      </div>\n      <div>{post.body}</div>\n    </article>\n  );\n}\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            posts: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching...</div>\n    } else {\n\n      let list = [];\n      for (const post of posts) {\n        list.push(<Post key={post.id} post={post} />);\n      }\n\n      return (\n        <div>\n          <div className='Timeline-post-button'>\n            <NavLink className=\"Timeline-post-button\" to='/time-limited-sns/compose/post/'>\n              <button>投稿</button>\n            </NavLink>\n          </div>\n          {list}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      user: {\n        id: props.match.params.id\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\" + this.state.user.id)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            user: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, user } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching user...</div>\n    } else {\n      return (\n        <div>\n          <div>ID: {user.id}</div>\n          <div>Username: {user.name}</div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default UserProfile;\n","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCG5BJZZBFgcQWGBqRJhDaNz8ewexFRYkc\",\n  authDomain: \"fir-sample-95184.firebaseapp.com\",\n  databaseURL: \"https://fir-sample-95184.firebaseio.com\",\n  projectId: \"fir-sample-95184\",\n  storageBucket: \"fir-sample-95184.appspot.com\",\n  messagingSenderId: \"848826544523\",\n  appId: \"1:848826544523:web:5a70d96c03d2a91e093f8e\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './SignIn.css';\n\nclass SignIn extends React.Component {\n  signIn() {\n    const provider = new firebase.auth.TwitterAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }\n\n  render() {\n    return (\n      <div className='SignIn'>\n        <div className='SignIn-top-message'>\n          <span>SNSのメッセージを</span><span>あとから消すのに</span><span>疲れたあなたへ</span>\n        </div>\n        <div className='SignIn-description'>\n          <span>カゲロウは、投稿したメッセージが</span><span>1時間で消えるSNSです。</span><br />\n          <span>さあ、カゲロウを使って、あとで消す手間から</span><span>解放されましょう！</span>\n        </div>\n        <div className='SignIn-button'>\n          <button onClick={this.signIn}><span>Twitterアカウントで</span><span>新規登録／ログイン</span></button>\n        </div>\n        <div className='SignIn-description'>\n          ちなみに、カゲロウという名前は昆虫のカゲロウ（蜉蝣）から来ています。\n          昆虫のカゲロウの成虫は寿命が1日と短命なため、\n          「メッセージが1時間で消える」というこのSNSの特徴と近いものを感じ、この名前にしました。\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport './PostPage.css';\nimport firebase from \"./firebase\";\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: '',\n      postButtonDisabled: true,\n      textareaDisabled: false,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.postMessage = this.postMessage.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      body: event.target.value,\n      postButtonDisabled: event.target.value ? false : true\n    });\n  }\n\n  postMessage(event) {\n    this.setState({\n      postButtonDisabled: true,\n      textareaDisabled: true,\n    });\n\n    const db = firebase.firestore();\n    db.collection(\"posted-contents\").add({\n      body: this.state.body,\n      postedAt: firebase.firestore.FieldValue.serverTimestamp(),\n      authorID: firebase.auth().currentUser.uid,\n    })\n      .then(function (docRef) {\n        console.log(\"Document written with ID: \", docRef.id);\n        alert(\"投稿しました\");\n        window.history.back();\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n        alert(\"投稿時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  render() {\n    return (\n      <div className='PostPage'>\n        <div>\n          <textarea rows=\"10\" cols=\"50\" autoFocus minLength='1' maxLength='200'\n            placeholder='いま何してる？' required onChange={this.handleChange}\n            disabled={this.state.textareaDisabled}>\n          </textarea>\n        </div>\n        <div className='PostPage-post-button'>\n          <button onClick={this.postMessage}\n            disabled={this.state.postButtonDisabled}>投稿する</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","import React from 'react';\nimport './App.css';\nimport Timeline from \"./Timeline\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport UserProfile from './UserProfile';\nimport firebase from \"./firebase\";\nimport SignIn from './SignIn';\nimport PostPage from './PostPage';\n\nclass App extends React.Component {\n  state = {\n    user: null,\n    checked_signin: false\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        user: user,\n        checked_signin: true\n      })\n    })\n  }\n\n  signOut() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const signInPage = (\n      <SignIn />\n    );\n\n    const timeLinePage = (\n      <div>\n        <header className=\"App-header\">\n          <div>\n            <a className=\"App-link\" href=\"/time-limited-sns/\">\n              カゲロウ（開発中）\n            </a>\n          </div>\n          <div>\n            <img src={this.state.user && this.state.user.photoURL} alt='profile'></img>\n          </div>\n          <div className=\"App-header-signout-button\">\n            <button onClick={this.signOut}>ログアウト</button>\n          </div>\n        </header>\n        <BrowserRouter>\n          <main className=\"App-main\">\n            <Route exact path='/time-limited-sns/' component={Timeline} />\n            <Route exact path='/time-limited-sns/users/:id' component={UserProfile} />\n            <Route exact path='/time-limited-sns/compose/post/' component={PostPage} />\n          </main>\n        </BrowserRouter>\n      </div>\n    );\n\n    const getPageContent = () => {\n      if (!this.state.checked_signin) {\n        return (\n          <div>\n            ログイン状態を確認中です。<br />\n            少々お待ち下さい。（数秒かかることがあります）\n          </div>\n        )\n      }\n\n      return this.state.user ? timeLinePage : signInPage\n    }\n\n    return (\n      <div className=\"App\">\n        {getPageContent()}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}