{"version":3,"sources":["Timeline.js","UserHome.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","post","timestamp","moment","subtract","id","tz","format","className","to","userId","body","Timeline","state","error","isLoaded","posts","fetch","then","res","json","result","setState","this","message","list","push","key","React","Component","UserHome","user","match","params","name","App","href","target","rel","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAKA,SAASA,EAAKC,GACZ,IAAIC,EAAOD,EAAMC,KACbC,EAAYC,MAASC,SAASH,EAAKI,GAAI,WACxCC,GAAG,cACHC,OAAO,uBACV,OACE,6BAASF,GAAIJ,EAAKI,GAAIG,UAAU,QAC9B,yBAAKA,UAAU,2BACb,6BACE,kBAAC,IAAD,CAASA,UAAU,gBAAgBC,GAAI,UAAYR,EAAKS,QAAxD,SACS,OAAST,EAAKS,SAGzB,yBAAKF,UAAU,kBAAf,oBACA,yBAAKA,UAAU,kBAAkBN,IAEnC,6BAAMD,EAAKU,O,IAuDFC,E,YAjDb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,iFASE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVC,MAAOK,OAMX,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,e,+BAMA,IAAD,EAC4BS,KAAKV,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MACzB,GAAIF,EACF,OAAO,uCAAaA,EAAMU,SACrB,GAAKT,EAEL,CAEL,IAAIU,EAAO,GAFN,uBAGL,YAAmBT,EAAnB,+CAA0B,CAAC,IAAhBf,EAAe,QACxBwB,EAAKC,KAAK,kBAAC3B,EAAD,CAAM4B,IAAK1B,EAAKI,GAAIJ,KAAMA,MAJjC,kFAOL,OAAOwB,EARP,OAAO,gD,GArCUG,IAAMC,W,OC2BdC,E,YAlDb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVgB,KAAM,CACJ1B,GAAIL,EAAMgC,MAAMC,OAAO5B,KANV,E,iFAWE,IAAD,OAClBY,MAAM,8CAAgDM,KAAKV,MAAMkB,KAAK1B,IACnEa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVgB,KAAMV,OAMV,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,e,+BAMA,IAAD,EAC2BS,KAAKV,MAA/BC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUgB,EADlB,EACkBA,KACzB,OAAIjB,EACK,uCAAaA,EAAMU,SAChBT,EAIR,6BACE,oCAAUgB,EAAK1B,IACf,0CAAgB0B,EAAKG,OALlB,qD,GAvCUN,IAAMC,WC0BdM,MAtBf,WACE,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,gDACA,6BACE,uBAAGA,UAAU,WAAW4B,KAAK,sBAC3BC,OAAO,SAASC,IAAI,uBADtB,iBAMJ,kBAAC,IAAD,KACE,0BAAM9B,UAAU,YACd,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO4B,KAAK,aAAaC,UAAWX,QCT1BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.358483e0.chunk.js","sourcesContent":["import React from 'react';\nimport './Timeline.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from \"react-router-dom\";\n\nfunction Post(props) {\n  let post = props.post;\n  let timestamp = moment().subtract(post.id, 'seconds')\n    .tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n  return (\n    <article id={post.id} className=\"Post\">\n      <div className=\"Post-username-timestamp\">\n        <div>\n          <NavLink className=\"Post-username\" to={'/users/' + post.userId}>\n            User: {\"user\" + post.userId}\n          </NavLink>\n        </div>\n        <div className=\"Post-timestamp\">　·　</div>\n        <div className=\"Post-timestamp\">{timestamp}</div>\n      </div>\n      <div>{post.body}</div>\n    </article>\n  );\n}\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            posts: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching...</div>\n    } else {\n\n      let list = [];\n      for (const post of posts) {\n        list.push(<Post key={post.id} post={post} />);\n      }\n\n      return list;\n    }\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\n\nclass UserHome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      user: {\n        id: props.match.params.id\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\" + this.state.user.id)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            user: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, user } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching user...</div>\n    } else {\n      return (\n        <div>\n          <div>ID: {user.id}</div>\n          <div>Username: {user.name}</div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default UserHome;\n","import React from 'react';\nimport './App.css';\nimport Timeline from \"./Timeline\";\nimport { BrowserRouter, NavLink, Route } from \"react-router-dom\";\nimport UserHome from './UserHome';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>時限SNS</div>\n        <div>\n          <a className=\"App-link\" href=\"https://reactjs.org\"\n            target=\"_blank\" rel=\"noopener noreferrer\">\n            Learn React\n            </a>\n        </div>\n      </header>\n      <BrowserRouter>\n        <main className=\"App-main\">\n          <Route exact path='/' component={Timeline} />\n          <Route path='/users/:id' component={UserHome} />\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}