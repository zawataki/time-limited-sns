{"version":3,"sources":["icon/delete-message.svg","icon/upload-image.svg","firebase.js","PostedMessage.js","PostButton.js","Timeline.js","UserProfile.js","SignIn.js","PostPage.js","ProfileEdit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","auth","PostedMessage","props","post","timestamp","postedAt","tz","format","useState","deleted","setDeleted","id","className","style","display","to","author","src","profilePictureURL","alt","name","currentUser","uid","iconDeleteMessage","onClick","a","async","window","confirm","collection","doc","delete","content","PostButton","cachedUsers","Map","Timeline","state","error","isLoaded","posts","currentComponent","this","where","moment","subtract","toDate","orderBy","limit","get","then","querySnapshot","Promise","all","docs","map","authorID","data","undefined","cachedUser","authorInRepository","profilePictures","small","set","body","unix","seconds","setState","catch","console","log","message","list","push","key","length","React","Component","UserProfile","isUserProfileLoaded","isUserPostsLoaded","user","profilePictureMiddle","confirmDeletionAccount","bind","userSnapshot","exists","Error","tmpUser","middle","fetchPostedContentsOfUser","ref","userReference","deleteUserAccount","code","alert","authProvider","TwitterAuthProvider","reauthenticateWithRedirect","location","href","element","authUserComponents","SignIn","provider","signInWithRedirect","signIn","PostPage","postButtonDisabled","textareaDisabled","handleChange","postMessage","event","target","value","add","FieldValue","serverTimestamp","docRef","history","back","rows","cols","autoFocus","minLength","maxLength","placeholder","required","onChange","disabled","storageRef","storage","CssTextField","withStyles","root","color","backgroundColor","borderBottomColor","fontSize","textAlign","TextField","ProfileEdit","userID","userName","newMiddleProfilePictureBuffer","newSmallProfilePictureBuffer","saveButtonDisabled","nameInputAreaDisabled","nameLength","saveProfile","onUploadedImage","updateData","metadata","contentType","child","put","smallProfileSnapshot","getDownloadURL","smallProfileUrl","middleProfileSnapshot","middleProfileUrl","update","files","file","type","resizeImageFile","buffer","err","size","jimp","read","URL","createObjectURL","image","resize","promisify","getBuffer","Jimp","MIME_JPEG","InputFiles","accept","toString","iconUploadImage","label","variant","fullWidth","margin","helperText","inputProps","InputLabelProps","shrink","App","loggedInUser","checked_signin","onAuthStateChanged","signOut","timeLinePage","photoURL","exact","path","component","render","match","params","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e35e4a89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete-message.a4b91b6f.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload-image.f7f24d9a.svg\";","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/analytics'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCHftesHfgg_vO29DkbpUbLOZYn4q9JpKM\",\n  authDomain: \"mayfly-86915.firebaseapp.com\",\n  databaseURL: \"https://mayfly-86915.firebaseio.com\",\n  projectId: \"mayfly-86915\",\n  storageBucket: \"mayfly-86915.appspot.com\",\n  messagingSenderId: \"490409158667\",\n  appId: \"1:490409158667:web:bf0ec8a4625217dc61ff0e\",\n  measurementId: \"G-G211MXL861\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase\n","import React, { useState } from 'react';\nimport './PostedMessage.css';\nimport { NavLink } from \"react-router-dom\";\nimport firebase from \"./firebase\";\nimport iconDeleteMessage from './icon/delete-message.svg';\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\n\nfunction PostedMessage(props) {\n  let post = props.post;\n  let timestamp = post.postedAt.tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n\n  const [deleted, setDeleted] = useState(false);\n\n  const confirmDeletionMessage = async () => {\n    const agreedWithDeletion = window.confirm(\"メッセージを削除しますか？\");\n    if (agreedWithDeletion) {\n      await db.collection(\"posted-contents\").doc(post.id).delete();\n      setDeleted(true);\n    }\n  };\n\n  return (\n    <article id={post.id} className=\"Post\" style={{\n      display: `${deleted ? 'none' : ''}`\n    }}>\n      <div className=\"Post-user-icon\">\n        <NavLink\n          to={'/users/' + post.author.id}>\n          <img src={post.author.profilePictureURL} alt=\"profile\"></img>\n        </NavLink>\n      </div>\n      <div className=\"Post-username-timestamp-content\">\n        <div className=\"Post-top-line\">\n          <div className=\"Post-top-line-left-side\">\n            <div className=\"Post-username-wrapper\">\n              <NavLink className=\"Post-username\"\n                to={'/users/' + post.author.id}>\n                {post.author.name}\n              </NavLink>\n            </div>\n            <span className=\"Post-timestamp-separator\">·</span>\n            <span className=\"Post-timestamp\">{timestamp}</span>\n          </div>\n          <div className=\"Post-top-line-right-side\">\n            {\n              post.author.id === auth.currentUser.uid ?\n                <img className=\"Post-delete-icon\" src={iconDeleteMessage}\n                  alt=\"delete\" onClick={confirmDeletionMessage}></img> :\n                ''\n            }\n          </div>\n        </div>\n        <div className=\"Post-content\">{post.content}</div>\n      </div>\n    </article>\n  );\n}\n\nexport default PostedMessage;\n","import React from 'react';\nimport './PostButton.css';\nimport { NavLink } from 'react-router-dom';\n\nfunction PostButton(props) {\n  return (\n    <div className='PostButton'>\n      <NavLink className=\"PostButton\" to='/compose/post/'>\n        <button>投稿</button>\n      </NavLink>\n    </div>\n  );\n}\n\nexport default PostButton;\n","import React from 'react';\nimport './Timeline.css';\nimport moment from 'moment-timezone';\nimport firebase from \"./firebase\";\nimport PostedMessage from './PostedMessage';\nimport PostButton from './PostButton';\n\nconst db = firebase.firestore();\nconst cachedUsers = new Map();\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    let currentComponent = this;\n\n    db.collection(\"posted-contents\")\n      .where('postedAt', '>=', moment().subtract(1, 'hours').toDate())\n      .orderBy(\"postedAt\", \"desc\")\n      // TODO Get old posted contents after scrolling down to the most bottom\n      .limit(20)\n      .get()\n      .then(function (querySnapshot) {\n\n        Promise.all(querySnapshot.docs.map(async (doc) => {\n          const authorID = doc.data().author.id;\n          const cachedUser = cachedUsers.get(authorID);\n          let author;\n          if (cachedUser !== undefined) {\n            author = {\n              id: authorID,\n              name: cachedUser.name,\n              profilePictureURL: cachedUser.profilePictureURL,\n            };\n          } else {\n            const authorInRepository = await doc.data().author.get();\n            author = {\n              id: authorInRepository.id,\n              name: authorInRepository.data().name,\n              profilePictureURL: authorInRepository.data().profilePictures.small,\n            };\n          }\n\n          cachedUsers.set(author.id, {\n            name: author.name,\n            profilePictureURL: author.profilePictureURL\n          });\n\n          return {\n            id: doc.id,\n            content: doc.data().body,\n            postedAt: moment.unix(doc.data().postedAt.seconds),\n            author: author,\n          };\n        }))\n          .then(function (posts) {\n            currentComponent.setState({\n              isLoaded: true,\n              posts\n            });\n          });\n      })\n      .catch(function (error) {\n        console.log(\"Error getting documents: \", error);\n        currentComponent.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  }\n\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching...</div>\n    } else {\n\n      let list = [];\n      for (const post of posts) {\n        list.push(<PostedMessage key={post.id} post={post} />);\n      }\n\n      return (\n        <div>\n          <PostButton />\n          {list.length <= 0 ? <div>まだ投稿がありません。</div> : list}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './UserProfile.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from 'react-router-dom';\nimport PostedMessage from './PostedMessage';\nimport PostButton from './PostButton';\n\nconst db = firebase.firestore();\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isUserProfileLoaded: false,\n      isUserPostsLoaded: false,\n      user: {\n        id: props.id,\n        name: \"\",\n        profilePictureMiddle: \"\",\n      },\n      posts: []\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.confirmDeletionAccount = this.confirmDeletionAccount.bind(this);\n  }\n\n  componentDidMount() {\n    db.collection(\"users\").doc(this.state.user.id)\n      .get()\n      .then(userSnapshot => {\n        if (!userSnapshot.exists) {\n          throw new Error(\"ユーザが見つかりません\");\n        }\n\n        const tmpUser = this.state.user;\n        tmpUser.name = userSnapshot.data().name;\n        tmpUser.profilePictureMiddle =\n          userSnapshot.data().profilePictures.middle;\n\n        this.setState({\n          isUserProfileLoaded: true,\n          user: tmpUser\n        });\n\n        this.fetchPostedContentsOfUser(this, userSnapshot.ref);\n      })\n      .catch(error => {\n        console.error(\"Failed to get user profile.\", error);\n        this.setState({\n          isUserProfileLoaded: true,\n          error\n        });\n      });\n  }\n\n  fetchPostedContentsOfUser(currentComponent, userReference) {\n    db.collection(\"posted-contents\")\n      .where('author', '==', userReference)\n      .where('postedAt', '>=', moment().subtract(1, 'hours').toDate())\n      .orderBy(\"postedAt\", \"desc\")\n      // TODO Get old posted contents after scrolling down to the most bottom\n      .limit(20)\n      .get()\n      .then(function (querySnapshot) {\n\n        Promise.all(querySnapshot.docs.map(async (doc) => {\n          return {\n            id: doc.id,\n            content: doc.data().body,\n            postedAt: moment.unix(doc.data().postedAt.seconds),\n            author: {\n              id: currentComponent.state.user.id,\n              name: currentComponent.state.user.name,\n              profilePictureURL: currentComponent.state.user.profilePictureMiddle,\n            },\n          };\n        }))\n          .then(function (posts) {\n            currentComponent.setState({\n              isUserPostsLoaded: true,\n              posts\n            });\n          });\n      })\n      .catch(error => {\n        console.error(\"Failed to get user's posts: \", error);\n        currentComponent.setState({\n          isUserPostsLoaded: true,\n          error\n        });\n      });\n  }\n\n  async confirmDeletionAccount() {\n    // TODO Force user to input some word (like \"delete\") to avoid unintentionally deletion\n    const agreedWithDeletion = window.confirm(\"アカウントを削除しますか？\");\n\n    if (agreedWithDeletion) {\n      try {\n        await this.deleteUserAccount();\n      } catch (error) {\n        if (error.code === \"auth/requires-recent-login\") {\n          window.alert(`アカウントを削除するためにTwitterの再認証が必要です。\nこの画面に再び戻ってきた後に改めてアカウントの削除をお試しください。`);\n\n          const user = firebase.auth().currentUser;\n          const authProvider = new firebase.auth.TwitterAuthProvider();\n          await user.reauthenticateWithRedirect(authProvider);\n          return\n        }\n        console.error(\"Failed to delete account\", error);\n        window.alert(\"アカウントの削除に失敗しました\");\n      }\n    }\n  }\n\n  async deleteUserAccount() {\n    console.log(\"Delete user account\");\n    await firebase.auth().currentUser.delete();\n    window.alert(`今までご利用いただき、ありがとうございました。\nアカウント削除が完了しました。\nなお、Twitterのアプリ連携については、Twitter側の制限のため\nお客様自身で解除する必要があります。\n解除するには、このメッセージを消した後に表示されるTwitter画面から\n「アクセス権を取り消す」を実行してください。`);\n    window.location.href = \"https://twitter.com/settings/applications/17209810\";\n  }\n\n  render() {\n    const { error, isUserProfileLoaded, isUserPostsLoaded, user } = this.state;\n    if (error) {\n      return <div>エラーが発生しました: {error.message}</div>\n    } else if (!isUserProfileLoaded) {\n      return <div>ユーザ情報を取得中です・・・</div>\n    } else {\n\n      let element;\n      if (!isUserPostsLoaded) {\n        element = <div>このユーザの投稿を取得中です。</div>\n      } else {\n        const list = [];\n        for (const post of this.state.posts) {\n          list.push(<PostedMessage key={post.id} post={post} />);\n        }\n        element = list.length <= 0 ? <div>まだ投稿がありません。</div> : list;\n      }\n\n      const authUserComponents = (\n        <div className=\"UserProfile-menu\">\n          <div className=\"UserProfile-edit-button\">\n            <NavLink className=\"UserProfile-edit-button\" to='/settings/profile/'>\n              <button>プロフィールを編集</button>\n            </NavLink>\n          </div>\n          <div className=\"UserProfile-delete-button\">\n            <button onClick={this.confirmDeletionAccount}>アカウントを削除</button>\n          </div>\n        </div>\n      );\n\n      return (\n        <div className='UserProfile'>\n          <div className='UserProfile-top'>\n            <div className='UserProfile-photo'>\n              <img src={user.profilePictureMiddle} alt='profile'></img>\n            </div>\n            <div className='UserProfile-name'>{user.name}</div>\n            {user.id === firebase.auth().currentUser.uid ?\n              authUserComponents :\n              \"\"}\n          </div>\n          <div className='UserProfile-posted-contents'>\n            <PostButton />\n            {element}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default UserProfile;\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './SignIn.css';\n\nclass SignIn extends React.Component {\n  signIn() {\n    const provider = new firebase.auth.TwitterAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }\n\n  render() {\n    return (\n      <div className='SignIn'>\n        <div className='SignIn-top-message'>\n          <span>SNSのメッセージを</span><span>あとから消すのに</span><span>疲れたあなたへ</span>\n        </div>\n        <div className='SignIn-description'>\n          <span>カゲロウは、投稿したメッセージが</span><span>1時間で消えるSNSです。</span><br />\n          <span>さあ、カゲロウを使って、あとで消す手間から</span><span>解放されましょう！</span>\n        </div>\n        <div className='SignIn-button'>\n          <button onClick={this.signIn}><span>Twitterアカウントで</span><span>新規登録／ログイン</span></button>\n        </div>\n        <div className='SignIn-description'>\n          ちなみに、カゲロウという名前は昆虫のカゲロウ（蜉蝣）から来ています。\n          昆虫のカゲロウの成虫は寿命が1日と短命なため、\n          「メッセージが1時間で消える」というこのSNSの特徴と近いものを感じ、この名前にしました。\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport './PostPage.css';\nimport firebase from \"./firebase\";\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: '',\n      postButtonDisabled: true,\n      textareaDisabled: false,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.postMessage = this.postMessage.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      body: event.target.value,\n      postButtonDisabled: event.target.value ? false : true\n    });\n  }\n\n  postMessage(event) {\n    this.setState({\n      postButtonDisabled: true,\n      textareaDisabled: true,\n    });\n\n    const db = firebase.firestore();\n    db.collection(\"posted-contents\").add({\n      body: this.state.body,\n      postedAt: firebase.firestore.FieldValue.serverTimestamp(),\n      author: db.collection(\"users\").doc(firebase.auth().currentUser.uid),\n    })\n      .then(function (docRef) {\n        window.history.back();\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n        alert(\"投稿時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  render() {\n    return (\n      <div className='PostPage'>\n        <div>\n          <textarea rows=\"10\" cols=\"50\" autoFocus minLength='1' maxLength='200'\n            placeholder='いま何してる？' required onChange={this.handleChange}\n            disabled={this.state.textareaDisabled}>\n          </textarea>\n        </div>\n        <div className='PostPage-post-button'>\n          <button onClick={this.postMessage}\n            disabled={this.state.postButtonDisabled}>投稿</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","import React from 'react';\nimport './ProfileEdit.css';\nimport firebase from \"./firebase\";\nimport InputFiles from 'react-input-files';\nimport jimp from 'jimp';\nimport Jimp from 'jimp';\nimport { promisify } from 'util';\nimport iconUploadImage from './icon/upload-image.svg';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst db = firebase.firestore();\nconst storageRef = firebase.storage().ref();\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: '#1CA1F2',\n    },\n    '& .MuiFilledInput-root': {\n      backgroundColor: '#192734',\n      color: 'white',\n    },\n    '& .MuiFilledInput-underline:before': {\n      borderBottomColor: 'grey',\n    },\n    '& .MuiFilledInput-underline:after': {\n      borderBottomColor: '#1CA1F2',\n    },\n    '& .MuiInputLabel-filled': {\n      color: 'gray',\n    },\n    '& .MuiFormHelperText-root': {\n      color: 'gray',\n      fontSize: 14,\n      textAlign: \"right\",\n    },\n  },\n})(TextField);\n\nclass ProfileEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userID: firebase.auth().currentUser.uid,\n      userName: '',\n      profilePictureURL: '',\n      newMiddleProfilePictureBuffer: '',\n      newSmallProfilePictureBuffer: '',\n      isUserProfileLoaded: false,\n      saveButtonDisabled: true,\n      nameInputAreaDisabled: false,\n      nameLength: 0,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.saveProfile = this.saveProfile.bind(this);\n    this.onUploadedImage = this.onUploadedImage.bind(this);\n  }\n\n  componentDidMount() {\n    db.collection(\"users\").doc(this.state.userID)\n      .get()\n      .then(userSnapshot => {\n        if (!userSnapshot.exists) {\n          throw new Error(\"ユーザが見つかりません\");\n        }\n\n        this.setState({\n          isUserProfileLoaded: true,\n          userName: userSnapshot.data().name,\n          profilePictureURL: userSnapshot.data().profilePictures.middle,\n          nameLength: userSnapshot.data().name.length,\n        });\n      })\n      .catch(error => {\n        console.error(\"Failed to get user profile.\", error);\n        this.setState({\n          isUserProfileLoaded: true,\n          error\n        });\n      });\n  }\n\n  handleChange(event) {\n    this.setState({\n      userName: event.target.value,\n      saveButtonDisabled: event.target.value ? false : true,\n      nameLength: event.target.value.length,\n    });\n  }\n\n  async saveProfile(event) {\n    this.setState({\n      saveButtonDisabled: true,\n      nameInputAreaDisabled: true,\n    });\n\n    const updateData = {\n      name: this.state.userName\n    };\n\n    if (this.state.newSmallProfilePictureBuffer) {\n      const metadata = {\n        contentType: 'image/jpeg',\n      };\n\n      const smallProfileSnapshot = await storageRef\n        .child(`users/${this.state.userID}/profile_small.jpg`)\n        .put(this.state.newSmallProfilePictureBuffer, metadata);\n      const smallProfileUrl = await smallProfileSnapshot.ref.getDownloadURL();\n      console.log('Uploaded a small picure as ' + smallProfileUrl);\n\n      const middleProfileSnapshot = await storageRef\n        .child(`users/${this.state.userID}/profile_middle.jpg`)\n        .put(this.state.newMiddleProfilePictureBuffer, metadata);\n      const middleProfileUrl = await middleProfileSnapshot.ref.getDownloadURL();\n      console.log('Uploaded a middle picure as ' + middleProfileUrl);\n\n      updateData.profilePictures = {\n        middle: middleProfileUrl,\n        small: smallProfileUrl\n      }\n    }\n\n    db.collection(\"users\").doc(this.state.userID).update(updateData)\n      .then(() => {\n        window.history.back();\n      })\n      .catch(error => {\n        console.error(\"Failed to update user profile.\", error);\n        alert(\"保存時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  onUploadedImage(files, event) {\n    if (files.length < 1) {\n      return;\n    }\n\n    const file = files[0];\n    if (file.type !== 'image/jpeg') {\n      alert('JPEG形式の画像をアップロードしてください')\n      return;\n    }\n\n    const currentComponent = this;\n\n    this.resizeImageFile(file, 200)\n      .then(buffer => {\n        currentComponent.setState({\n          newMiddleProfilePictureBuffer: buffer,\n        });\n        return file;\n      })\n      .then(file => {\n        return this.resizeImageFile(file, 48);\n      })\n      .then(buffer => {\n        currentComponent.setState({\n          newSmallProfilePictureBuffer: buffer,\n          saveButtonDisabled: false,\n        });\n      })\n      .catch(err => {\n        console.error(`Failed to read the uploaded image. ${err}`);\n        alert(\"画像の読み込みに失敗しました。未対応の画像形式である可能性が高いです。\");\n      });\n  }\n\n  async resizeImageFile(file, size) {\n    const image = await jimp.read(URL.createObjectURL(file));\n    image.resize(size, size);\n    return promisify(image.getBuffer.bind(image))(Jimp.MIME_JPEG);\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>エラーが発生しました: {this.state.error.message}</div>\n    } else if (!this.state.isUserProfileLoaded) {\n      return <div>ユーザ情報を取得中です・・・</div>\n    } else {\n      return (\n        <div className='ProfileEdit'>\n          <div>\n            <h1>\n              プロフィール編集\n            </h1>\n            <div className='ProfileEdit-image-area'>\n              <InputFiles accept='image/jpeg' onChange={this.onUploadedImage}>\n                <img className='ProfileEdit-profile-img' src={\n                  this.state.newMiddleProfilePictureBuffer ?\n                    'data:image/jpeg;base64,' + this.state.newMiddleProfilePictureBuffer.toString('base64') :\n                    this.state.profilePictureURL\n                } alt='profile'>\n                </img>\n                <img className='ProfileEdit-upload-icon' src={iconUploadImage} alt='upload'></img>\n              </InputFiles>\n            </div>\n            <CssTextField id=\"filled-basic\" label=\"名前\" variant=\"filled\"\n              required fullWidth margin=\"normal\"\n              placeholder='名前を追加' value={this.state.userName}\n              onChange={this.handleChange}\n              disabled={this.state.nameInputAreaDisabled}\n              helperText={this.state.nameLength + \"/50\"}\n              inputProps={{\n                style: { fontSize: 18 },\n                minLength: 1,\n                maxLength: 50,\n              }}\n              InputLabelProps={{\n                style: {\n                  // scale(0.75) is automatically applied, so divide by 0.75.\n                  fontSize: 14 / 0.75\n                },\n                shrink: true\n              }}\n              className='ProfileEdit-name' />\n          </div>\n          <div className='ProfileEdit-save-button'>\n            <button onClick={this.saveProfile}\n              disabled={this.state.saveButtonDisabled}>保存</button>\n          </div>\n        </div >\n      );\n    }\n  }\n}\n\nexport default ProfileEdit;\n","import React from 'react';\nimport './App.css';\nimport Timeline from \"./Timeline\";\nimport { BrowserRouter, Route, NavLink } from \"react-router-dom\";\nimport UserProfile from './UserProfile';\nimport firebase from \"./firebase\";\nimport SignIn from './SignIn';\nimport PostPage from './PostPage';\nimport ProfileEdit from './ProfileEdit';\n\nclass App extends React.Component {\n  state = {\n    loggedInUser: null,\n    checked_signin: false\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        loggedInUser: user,\n        checked_signin: true\n      })\n    })\n  }\n\n  signOut() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const timeLinePage = (\n      <div>\n        <BrowserRouter>\n          <header className=\"App-header\">\n            <div>\n              <NavLink className=\"App-link\" to='/'>\n                カゲロウ（開発中）\n              </NavLink>\n            </div>\n            <div>\n              <NavLink to={'/users/' + this.state.loggedInUser?.uid}>\n                <img src={this.state.loggedInUser?.photoURL} alt='profile'></img>\n              </NavLink>\n            </div>\n            <div className=\"App-header-signout-button\">\n              <button onClick={this.signOut}>ログアウト</button>\n            </div>\n          </header>\n          <main className=\"App-main\">\n            <Route exact path='/' component={Timeline} />\n            <Route exact path='/users/:id' render={props =>\n              <UserProfile key={props.match.params.id}\n                id={props.match.params.id} />\n            } />\n            <Route exact path='/compose/post/' component={PostPage} />\n            <Route exact path='/settings/profile/' component={ProfileEdit} />\n          </main>\n        </BrowserRouter>\n      </div>\n    );\n\n    const getPageContent = () => {\n      if (!this.state.checked_signin) {\n        return (\n          <div>\n            ログイン状態を確認中です。<br />\n            少々お待ち下さい。（数秒かかることがあります）\n          </div>\n        )\n      }\n\n      return this.state.loggedInUser ? timeLinePage : <SignIn />\n    }\n\n    return (\n      <div className=\"App\">\n        {getPageContent()}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}