{"version":3,"sources":["icon/upload-image.svg","firebase.js","Timeline.js","UserProfile.js","SignIn.js","PostPage.js","ProfileEdit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","Post","props","post","timestamp","postedAt","tz","format","id","className","to","author","name","content","cachedUsers","Map","Timeline","state","error","isLoaded","posts","currentComponent","this","collection","where","moment","subtract","toDate","orderBy","limit","get","then","querySnapshot","Promise","all","docs","map","doc","a","async","authorID","data","undefined","cachedUserName","authorInRepository","set","body","unix","seconds","setState","catch","console","log","message","list","push","key","length","React","Component","UserProfile","isUserProfileLoaded","isUserPostsLoaded","user","match","params","profilePictureMiddle","userSnapshot","exists","Error","tmpUser","profilePictures","middle","fetchPostedContentsOfUser","ref","userReference","element","src","alt","auth","currentUser","uid","SignIn","provider","TwitterAuthProvider","signInWithRedirect","onClick","signIn","PostPage","postButtonDisabled","textareaDisabled","handleChange","bind","postMessage","event","target","value","add","FieldValue","serverTimestamp","docRef","alert","window","history","back","rows","cols","autoFocus","minLength","maxLength","placeholder","required","onChange","disabled","storageRef","storage","ProfileEdit","userID","userName","profilePictureURL","newMiddleProfilePictureBuffer","newSmallProfilePictureBuffer","saveButtonDisabled","nameInputAreaDisabled","saveProfile","onUploadedImage","updateData","metadata","contentType","child","put","smallProfileSnapshot","getDownloadURL","smallProfileUrl","middleProfileSnapshot","middleProfileUrl","small","update","files","file","type","resizeImageFile","buffer","err","size","jimp","read","URL","createObjectURL","image","resize","promisify","getBuffer","Jimp","MIME_JPEG","InputFiles","accept","toString","iconUuploadImage","App","loggedInUser","checked_signin","onAuthStateChanged","signOut","timeLinePage","photoURL","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7202e2ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload-image.f7f24d9a.svg\";","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/analytics'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCHftesHfgg_vO29DkbpUbLOZYn4q9JpKM\",\n  authDomain: \"mayfly-86915.firebaseapp.com\",\n  databaseURL: \"https://mayfly-86915.firebaseio.com\",\n  projectId: \"mayfly-86915\",\n  storageBucket: \"mayfly-86915.appspot.com\",\n  messagingSenderId: \"490409158667\",\n  appId: \"1:490409158667:web:bf0ec8a4625217dc61ff0e\",\n  measurementId: \"G-G211MXL861\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase\n","import React from 'react';\nimport './Timeline.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from \"react-router-dom\";\nimport firebase from \"./firebase\";\n\nconst db = firebase.firestore();\n\nfunction Post(props) {\n  let post = props.post;\n  let timestamp = post.postedAt.tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n\n  return (\n    <article id={post.id} className=\"Post\">\n      <div className=\"Post-username-timestamp\">\n        <div>\n          <NavLink className=\"Post-username\"\n            to={'/time-limited-sns/users/' + post.author.id}>\n            {post.author.name}\n          </NavLink>\n        </div>\n        <div className=\"Post-timestamp\">　·　</div>\n        <div className=\"Post-timestamp\">{timestamp}</div>\n      </div>\n      <div>{post.content}</div>\n    </article>\n  );\n}\n\nconst cachedUsers = new Map();\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    let currentComponent = this;\n\n    db.collection(\"posted-contents\")\n      .where('postedAt', '>=', moment().subtract(1, 'hours').toDate())\n      .orderBy(\"postedAt\", \"desc\")\n      // TODO Get old posted contents after scrolling down to the most bottom\n      .limit(20)\n      .get()\n      .then(function (querySnapshot) {\n\n        Promise.all(querySnapshot.docs.map(async (doc) => {\n          const authorID = doc.data().author.id;\n          const cachedUserName = cachedUsers.get(authorID);\n          let author;\n          if (cachedUserName !== undefined) {\n            author = {\n              id: authorID,\n              name: cachedUserName\n            };\n          } else {\n            const authorInRepository = await doc.data().author.get();\n            author = {\n              id: authorInRepository.id,\n              name: authorInRepository.data().name\n            };\n          }\n\n          cachedUsers.set(author.id, author.name);\n\n          return {\n            id: doc.id,\n            content: doc.data().body,\n            postedAt: moment.unix(doc.data().postedAt.seconds),\n            author: {\n              id: author.id,\n              name: author.name\n            },\n          };\n        }))\n          .then(function (posts) {\n            currentComponent.setState({\n              isLoaded: true,\n              posts\n            });\n          });\n      })\n      .catch(function (error) {\n        console.log(\"Error getting documents: \", error);\n        currentComponent.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  }\n\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Fetching...</div>\n    } else {\n\n      let list = [];\n      for (const post of posts) {\n        list.push(<Post key={post.id} post={post} />);\n      }\n\n      return (\n        <div>\n          <div className='Timeline-post-button'>\n            <NavLink className=\"Timeline-post-button\" to='/time-limited-sns/compose/post/'>\n              <button>投稿</button>\n            </NavLink>\n          </div>\n          {list.length <= 0 ? <div>まだ投稿がありません。</div> : list}\n        </div>\n      );\n    }\n  }\n}\n\nexport default Timeline;\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './UserProfile.css';\nimport moment from 'moment-timezone';\nimport { NavLink } from 'react-router-dom';\n\nconst db = firebase.firestore();\n\nfunction Post(props) {\n  let post = props.post;\n  let timestamp = post.postedAt.tz(\"Asia/Tokyo\")\n    .format('YYYY-MM-DD HH:mm:ss');\n\n  return (\n    <article id={post.id} className=\"Post\">\n      <div className=\"Post-username-timestamp\">\n        <div className=\"Post-timestamp\">{timestamp}</div>\n      </div>\n      <div>{post.content}</div>\n    </article>\n  );\n}\n\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isUserProfileLoaded: false,\n      isUserPostsLoaded: false,\n      user: {\n        id: props.match.params.id,\n        name: \"\",\n        profilePictureMiddle: \"\",\n      },\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    db.collection(\"users\").doc(this.state.user.id)\n      .get()\n      .then(userSnapshot => {\n        if (!userSnapshot.exists) {\n          throw new Error(\"ユーザが見つかりません\");\n        }\n\n        const tmpUser = this.state.user;\n        tmpUser.name = userSnapshot.data().name;\n        tmpUser.profilePictureMiddle =\n          userSnapshot.data().profilePictures.middle;\n\n        this.setState({\n          isUserProfileLoaded: true,\n          user: tmpUser\n        });\n\n        this.fetchPostedContentsOfUser(this, userSnapshot.ref);\n      })\n      .catch(error => {\n        console.error(\"Failed to get user profile.\", error);\n        this.setState({\n          isUserProfileLoaded: true,\n          error\n        });\n      });\n  }\n\n  fetchPostedContentsOfUser(currentComponent, userReference) {\n    db.collection(\"posted-contents\")\n      .where('author', '==', userReference)\n      .where('postedAt', '>=', moment().subtract(1, 'hours').toDate())\n      .orderBy(\"postedAt\", \"desc\")\n      // TODO Get old posted contents after scrolling down to the most bottom\n      .limit(20)\n      .get()\n      .then(function (querySnapshot) {\n\n        Promise.all(querySnapshot.docs.map(async (doc) => {\n          return {\n            id: doc.id,\n            content: doc.data().body,\n            postedAt: moment.unix(doc.data().postedAt.seconds),\n          };\n        }))\n          .then(function (posts) {\n            currentComponent.setState({\n              isUserPostsLoaded: true,\n              posts\n            });\n          });\n      })\n      .catch(error => {\n        console.error(\"Failed to get user's posts: \", error);\n        currentComponent.setState({\n          isUserPostsLoaded: true,\n          error\n        });\n      });\n  }\n\n  render() {\n    const { error, isUserProfileLoaded, isUserPostsLoaded, user } = this.state;\n    if (error) {\n      return <div>エラーが発生しました: {error.message}</div>\n    } else if (!isUserProfileLoaded) {\n      return <div>ユーザ情報を取得中です・・・</div>\n    } else {\n\n      let element;\n      if (!isUserPostsLoaded) {\n        element = <div>このユーザの投稿を取得中です。</div>\n      } else {\n        const list = [];\n        for (const post of this.state.posts) {\n          list.push(<Post key={post.id} post={post} />);\n        }\n        element = list.length <= 0 ? <div>まだ投稿がありません。</div> : list;\n      }\n\n      return (\n        <div className='UserProfile'>\n          <div className='UserProfile-top'>\n            <div className='UserProfile-photo'>\n              <img src={user.profilePictureMiddle} alt='profile'></img>\n            </div>\n            <div className='UserProfile-name'>{user.name}</div>\n            {user.id === firebase.auth().currentUser.uid ?\n              <div className=\"UserProfile-edit-button\">\n                <NavLink className=\"UserProfile-edit-button\" to='/time-limited-sns/settings/profile/'>\n                  <button>プロフィールを編集</button>\n                </NavLink>\n              </div> :\n              \"\"}\n          </div>\n          <div className='UserProfile-posted-contents'>\n            {element}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default UserProfile;\n","import React from 'react';\nimport firebase from \"./firebase\";\nimport './SignIn.css';\n\nclass SignIn extends React.Component {\n  signIn() {\n    const provider = new firebase.auth.TwitterAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }\n\n  render() {\n    return (\n      <div className='SignIn'>\n        <div className='SignIn-top-message'>\n          <span>SNSのメッセージを</span><span>あとから消すのに</span><span>疲れたあなたへ</span>\n        </div>\n        <div className='SignIn-description'>\n          <span>カゲロウは、投稿したメッセージが</span><span>1時間で消えるSNSです。</span><br />\n          <span>さあ、カゲロウを使って、あとで消す手間から</span><span>解放されましょう！</span>\n        </div>\n        <div className='SignIn-button'>\n          <button onClick={this.signIn}><span>Twitterアカウントで</span><span>新規登録／ログイン</span></button>\n        </div>\n        <div className='SignIn-description'>\n          ちなみに、カゲロウという名前は昆虫のカゲロウ（蜉蝣）から来ています。\n          昆虫のカゲロウの成虫は寿命が1日と短命なため、\n          「メッセージが1時間で消える」というこのSNSの特徴と近いものを感じ、この名前にしました。\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport './PostPage.css';\nimport firebase from \"./firebase\";\n\nclass PostPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: '',\n      postButtonDisabled: true,\n      textareaDisabled: false,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.postMessage = this.postMessage.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      body: event.target.value,\n      postButtonDisabled: event.target.value ? false : true\n    });\n  }\n\n  postMessage(event) {\n    this.setState({\n      postButtonDisabled: true,\n      textareaDisabled: true,\n    });\n\n    const db = firebase.firestore();\n    db.collection(\"posted-contents\").add({\n      body: this.state.body,\n      postedAt: firebase.firestore.FieldValue.serverTimestamp(),\n      author: db.collection(\"users\").doc(firebase.auth().currentUser.uid),\n    })\n      .then(function (docRef) {\n        console.log(\"Document written with ID: \", docRef.id);\n        alert(\"投稿してくれてありがとうございます！\");\n        window.history.back();\n      })\n      .catch(function (error) {\n        console.error(\"Error adding document: \", error);\n        alert(\"投稿時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  render() {\n    return (\n      <div className='PostPage'>\n        <div>\n          <textarea rows=\"10\" cols=\"50\" autoFocus minLength='1' maxLength='200'\n            placeholder='いま何してる？' required onChange={this.handleChange}\n            disabled={this.state.textareaDisabled}>\n          </textarea>\n        </div>\n        <div className='PostPage-post-button'>\n          <button onClick={this.postMessage}\n            disabled={this.state.postButtonDisabled}>投稿する</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","import React from 'react';\nimport './ProfileEdit.css';\nimport firebase from \"./firebase\";\nimport InputFiles from 'react-input-files';\nimport jimp from 'jimp';\nimport Jimp from 'jimp';\nimport { promisify } from 'util';\nimport iconUuploadImage from './icon/upload-image.svg';\n\nconst db = firebase.firestore();\nconst storageRef = firebase.storage().ref();\n\nclass ProfileEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userID: firebase.auth().currentUser.uid,\n      userName: '',\n      profilePictureURL: '',\n      newMiddleProfilePictureBuffer: '',\n      newSmallProfilePictureBuffer: '',\n      isUserProfileLoaded: false,\n      saveButtonDisabled: true,\n      nameInputAreaDisabled: false,\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleChange = this.handleChange.bind(this);\n    this.saveProfile = this.saveProfile.bind(this);\n    this.onUploadedImage = this.onUploadedImage.bind(this);\n  }\n\n  componentDidMount() {\n    db.collection(\"users\").doc(this.state.userID)\n      .get()\n      .then(userSnapshot => {\n        if (!userSnapshot.exists) {\n          throw new Error(\"ユーザが見つかりません\");\n        }\n\n        this.setState({\n          isUserProfileLoaded: true,\n          userName: userSnapshot.data().name,\n          profilePictureURL: userSnapshot.data().profilePictures.middle,\n        });\n      })\n      .catch(error => {\n        console.error(\"Failed to get user profile.\", error);\n        this.setState({\n          isUserProfileLoaded: true,\n          error\n        });\n      });\n  }\n\n  handleChange(event) {\n    this.setState({\n      userName: event.target.value,\n      saveButtonDisabled: event.target.value ? false : true\n    });\n  }\n\n  async saveProfile(event) {\n    this.setState({\n      saveButtonDisabled: true,\n      nameInputAreaDisabled: true,\n    });\n\n    const updateData = {\n      name: this.state.userName\n    };\n\n    if (this.state.newSmallProfilePictureBuffer) {\n      const metadata = {\n        contentType: 'image/jpeg',\n      };\n\n      const smallProfileSnapshot = await storageRef\n        .child(`users/${this.state.userID}/profile_small.jpg`)\n        .put(this.state.newSmallProfilePictureBuffer, metadata);\n      const smallProfileUrl = await smallProfileSnapshot.ref.getDownloadURL();\n      console.log('Uploaded a small picure as ' + smallProfileUrl);\n\n      const middleProfileSnapshot = await storageRef\n        .child(`users/${this.state.userID}/profile_middle.jpg`)\n        .put(this.state.newMiddleProfilePictureBuffer, metadata);\n      const middleProfileUrl = await middleProfileSnapshot.ref.getDownloadURL();\n      console.log('Uploaded a middle picure as ' + middleProfileUrl);\n\n      updateData.profilePictures = {\n        middle: middleProfileUrl,\n        small: smallProfileUrl\n      }\n    }\n\n    db.collection(\"users\").doc(this.state.userID).update(updateData)\n      .then(() => {\n        window.history.back();\n      })\n      .catch(error => {\n        console.error(\"Failed to update user profile.\", error);\n        alert(\"保存時にエラーが発生しました。\\n\" + error);\n      });\n  }\n\n  onUploadedImage(files, event) {\n    if (files.length < 1) {\n      return;\n    }\n\n    const file = files[0];\n    if (file.type !== 'image/jpeg') {\n      alert('JPEG形式の画像をアップロードしてください')\n      return;\n    }\n\n    const currentComponent = this;\n\n    this.resizeImageFile(file, 200)\n      .then(buffer => {\n        currentComponent.setState({\n          newMiddleProfilePictureBuffer: buffer,\n        });\n        return file;\n      })\n      .then(file => {\n        return this.resizeImageFile(file, 48);\n      })\n      .then(buffer => {\n        currentComponent.setState({\n          newSmallProfilePictureBuffer: buffer,\n          saveButtonDisabled: false,\n        });\n      })\n      .catch(err => {\n        console.error(`Failed to read the uploaded image. ${err}`);\n        alert(\"画像の読み込みに失敗しました。未対応の画像形式である可能性が高いです。\");\n      });\n  }\n\n  async resizeImageFile(file, size) {\n    const image = await jimp.read(URL.createObjectURL(file));\n    image.resize(size, size);\n    return promisify(image.getBuffer.bind(image))(Jimp.MIME_JPEG);\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>エラーが発生しました: {this.state.error.message}</div>\n    } else if (!this.state.isUserProfileLoaded) {\n      return <div>ユーザ情報を取得中です・・・</div>\n    } else {\n      return (\n        <div className='ProfileEdit'>\n          <div>\n            <h2>\n              プロフィール編集\n            </h2>\n            <div className='ProfileEdit-image-area'>\n              <InputFiles accept='image/jpeg' onChange={this.onUploadedImage}>\n                <img className='ProfileEdit-profile-img' src={\n                  this.state.newMiddleProfilePictureBuffer ?\n                    'data:image/jpeg;base64,' + this.state.newMiddleProfilePictureBuffer.toString('base64') :\n                    this.state.profilePictureURL\n                } alt='profile'>\n                </img>\n                <img className='ProfileEdit-upload-icon' src={iconUuploadImage} alt='upload'></img>\n              </InputFiles>\n            </div>\n            <div className='ProfileEdit-text'>\n              <label>\n                <div>\n                  名前:\n                </div>\n                <input type=\"text\" required minLength='1' maxLength='50'\n                  value={this.state.userName}\n                  placeholder='名前を追加' onChange={this.handleChange}\n                  disabled={this.state.nameInputAreaDisabled}>\n                </input>\n              </label>\n              <div>1/50</div>\n            </div>\n          </div>\n          <div className='ProfileEdit-save-button'>\n            <button onClick={this.saveProfile}\n              disabled={this.state.saveButtonDisabled}>保存</button>\n          </div>\n        </div >\n      );\n    }\n  }\n}\n\nexport default ProfileEdit;\n","import React from 'react';\nimport './App.css';\nimport Timeline from \"./Timeline\";\nimport { BrowserRouter, Route, NavLink } from \"react-router-dom\";\nimport UserProfile from './UserProfile';\nimport firebase from \"./firebase\";\nimport SignIn from './SignIn';\nimport PostPage from './PostPage';\nimport ProfileEdit from './ProfileEdit';\n\nclass App extends React.Component {\n  state = {\n    loggedInUser: null,\n    checked_signin: false\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        loggedInUser: user,\n        checked_signin: true\n      })\n    })\n  }\n\n  signOut() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const timeLinePage = (\n      <div>\n        <BrowserRouter>\n          <header className=\"App-header\">\n            <div>\n              <NavLink className=\"App-link\" to='/time-limited-sns/'>\n                カゲロウ（開発中）\n              </NavLink>\n            </div>\n            <div>\n              <NavLink to='/time-limited-sns/settings/profile/'>\n                <img src={this.state.loggedInUser?.photoURL} alt='profile'></img>\n              </NavLink>\n            </div>\n            <div className=\"App-header-signout-button\">\n              <button onClick={this.signOut}>ログアウト</button>\n            </div>\n          </header>\n          <main className=\"App-main\">\n            <Route exact path='/time-limited-sns/' component={Timeline} />\n            <Route exact path='/time-limited-sns/users/:id' component={UserProfile} />\n            <Route exact path='/time-limited-sns/compose/post/' component={PostPage} />\n            <Route exact path='/time-limited-sns/settings/profile/' component={ProfileEdit} />\n          </main>\n        </BrowserRouter>\n      </div>\n    );\n\n    const getPageContent = () => {\n      if (!this.state.checked_signin) {\n        return (\n          <div>\n            ログイン状態を確認中です。<br />\n            少々お待ち下さい。（数秒かかることがあります）\n          </div>\n        )\n      }\n\n      return this.state.loggedInUser ? timeLinePage : <SignIn />\n    }\n\n    return (\n      <div className=\"App\">\n        {getPageContent()}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}